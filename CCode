#include <time.h>
#include <iostream>
using namespace std;
#define _XTAL_FREQ 8000000
void left(void);
void right(void);
void stop(void);
void forward(void);
void usDelay(unsigned int);
void msDelay(unsigned int);
void read_sonar(void);
void init_sonar(void);
unsigned int T1overflow;
unsigned long T1counts;
unsigned long T1time;
unsigned long Distance;
unsigned int Dcntr;
unsigned int x;
int randgenerator(void);
void interrupt(void){
     if(INTCON.RBIF){
         INTCON.RBIF=0;    //Clear RBIF flag
     }
     if(INTCON.INTF){
         stop();
         x = randgenerator();
         if(x==1) right();
         else if(x==0) left();
         else right();
         INTCON.INTF=0;    //Clear INTF flag
     }
     if(INTCON.TMR0IF){// will get here every 1ms
         TMR0=248;
         Dcntr++;
         if(Dcntr==500){//after 500 ms
             Dcntr=0;
             read_sonar();
         }
         INTCON.TMR0IF=0; //clear T0IF
     }
     if(PIR1&0x04){//CCP1 interrupt
         PIR1=PIR1&0xFB;
     }
     if(PIR1&0x01){//TMR1 ovwerflow
         T1overflow++;
         PIR1=PIR1&0xFE;
     }
}
void main() {
     srand((unsigned)time(NULL));
     TRISB = 0x03;   //IR -> input RB0 //Ultrasound -> input RB1, output RB2
     TRISD = 0x00;   //Motors -> input RB4-7
     PORTB = 0x00;
     PORTD = 0X00;
     INTCON = INTCON | 0xF8;     //0x98
     TMR0=248;
     x = 2;
     CCP1CON=0x00;// Disable CCP. Capture on rising for the first time.  Capture on Rising: 0x05, Capture on Falling: 0x04
     OPTION_REG = 0x87;//Fosc/4 with 256 prescaler => incremetn every 0.5us*256=128us ==> overflow 8count*128us=1ms to overflow
     init_sonar();
     while(1){
         PORTD = 0xAA;
     }
}
void read_sonar(void){
    //Ultrasound Sensor 1
    T1overflow=0;
    TMR1H=0;
    TMR1L=0;
    PORTB=PORTB|0x04;//Trigger the ultrasonic sensor (RB2 connected to trigger)
    msDelay(25);//keep trigger for 25 mS
    PORTB=PORTB&0xFB;//Remove trigger
    while(!(PORTB&0x02));
    T1CON=0x19;//TMR1 ON,  Fosc/4 (inc 1uS) with 1:2 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
    while(PORTB&0x02);
    T1CON=0x18;//TMR1 OFF,  Fosc/4 (inc 1uS) with 1:1 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
    if(TMR1L>50) INTCON.INTF=1;
    
    //Ultrasound Sensor 2
    T1overflow=0;
    TMR1H=0;
    TMR1L=0;
    PORTB=PORTB|0x10;//Trigger the ultrasonic sensor (RB2 connected to trigger)
    msDelay(25);//keep trigger for 25 mS
    PORTB=PORTB&0xEF;//Remove trigger
    while(!(PORTB&0x08));
    T1CON=0x19;//TMR1 ON,  Fosc/4 (inc 1uS) with 1:2 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
    while(PORTB&0x08);
    T1CON=0x18;//TMR1 OFF,  Fosc/4 (inc 1uS) with 1:1 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
    if(TMR1L>50) INTCON.INTF=1;
    
    //Ultrasound Sensor 3
    T1overflow=0;
    TMR1H=0;
    TMR1L=0;
    PORTB=PORTB|0x40;//Trigger the ultrasonic sensor (RB2 connected to trigger)
    msDelay(25);//keep trigger for 25 mS
    PORTB=PORTB&0xDF;//Remove trigger
    while(!(PORTB&0x20));
    T1CON=0x19;//TMR1 ON,  Fosc/4 (inc 1uS) with 1:2 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
    while(PORTB&0x20);
    T1CON=0x18;//TMR1 OFF,  Fosc/4 (inc 1uS) with 1:1 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
    if(TMR1L>50) INTCON.INTF=1;
}
void init_sonar(void){
    T1overflow=0;
    T1counts=0;
    T1time=0;
    Distance=0;
    TMR1H=0;
    TMR1L=0;
    PIE1=PIE1|0x01;// Enable TMR1 Overflow interrupt
    T1CON=0x18;//TMR1 OFF,  Fosc/4 (inc 1uS) with 1:2 prescaler (TMR1 overflow after 0xFFFF counts ==65536)==> 65.536ms
}
void left(void){
     PORTD = 0x66; //Turn Left
     msDelay(3000);
}
void right(void){
     PORTD = 0x99; //Turn Right
     msDelay(3000);
}
void stop(void){
     PORTD = 0x00; //Stop Motors
     msDelay(1000);
}
void usDelay(unsigned int usCnt){
    unsigned int us=0;
    for(us=0;us<usCnt;us++){
      asm NOP;//0.5 uS
      asm NOP;//0.5uS
}}
void msDelay(unsigned int msCnt){
    unsigned int ms=0;
    unsigned int cc=0;
    for(ms=0;ms<(msCnt);ms++){
    for(cc=0;cc<155;cc++);//1ms
}}
int randgenerator(void){
    return 1+(int)(rand()/(double)(RAND_MAX+1)*2);
}
